#include <iostream>
#include <sstream>
#include <istream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cmath>
#include <functional>

#include "MCTruthTreeProducer.h"
#include "JetUtilMC.h"
#include "FWCore/Framework/interface/Event.h"
#include "DataFormats/Common/interface/Handle.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/Framework/interface/EventSetup.h"
#include "FWCore/Framework/interface/ESHandle.h"
#include "Geometry/Records/interface/IdealGeometryRecord.h"

#include "DataFormats/JetReco/interface/CaloJet.h"
#include "DataFormats/JetReco/interface/CaloJetCollection.h"
#include "DataFormats/JetReco/interface/PFJet.h"
#include "DataFormats/JetReco/interface/PFJetCollection.h"
#include "DataFormats/JetReco/interface/GenJet.h"
#include "DataFormats/JetReco/interface/GenJetCollection.h"
using namespace edm;
using namespace reco;
using namespace std;
namespace cms
{
template<class Jet>
MCTruthTreeProducer<Jet>::MCTruthTreeProducer(edm::ParameterSet const& cfg) 
{
  jets_          = cfg.getParameter<std::string> ("jets");
  genjets_       = cfg.getParameter<std::string> ("genjets");
  histogramFile_ = cfg.getParameter<std::string> ("histogramFile");
}
//////////////////////////////////////////////////////////////////////////////////////////
template<class Jet>
void MCTruthTreeProducer<Jet>::beginJob(EventSetup const& iSetup) 
{
  m_file_        = new TFile(histogramFile_.c_str(),"RECREATE");
  mcTruthTree_   = new TTree("mcTruthTree","mcTruthTree");

  mcTruthTree_->Branch("ptCalo",     &ptCalo_,     "ptCalo_/F");
  mcTruthTree_->Branch("ptGen",      &ptGen_,      "ptGen_/F");
  mcTruthTree_->Branch("ptHat",      &ptHat_,      "ptHat_/F");
  mcTruthTree_->Branch("etaCalo",    &etaCalo_,    "etaCalo_/F");
  mcTruthTree_->Branch("etaGen",     &etaGen_,     "etaGen_/F");
  mcTruthTree_->Branch("phiCalo",    &phiCalo_,    "phiCalo_/F");
  mcTruthTree_->Branch("phiGen",     &phiGen_,     "phiGen_/F");
  mcTruthTree_->Branch("dR",         &dR_,         "dR_/F");
  mcTruthTree_->Branch("rank",       &rank_,       "rank_/I");
}
template<class Jet>
//////////////////////////////////////////////////////////////////////////////////////////
void MCTruthTreeProducer<Jet>::endJob() 
{
  if (m_file_ !=0) 
    {
      m_file_->cd();
      mcTruthTree_->Write();
      delete m_file_;
      m_file_ = 0;      
    }
}
//////////////////////////////////////////////////////////////////////////////////////////
template<class Jet>
void MCTruthTreeProducer<Jet>::analyze(edm::Event const& event, edm::EventSetup const& iSetup) 
{ 
  edm::Handle<GenJetCollection> genjets;
  edm::Handle<JetCollection> jets;
  edm::Handle<double> genEventScale;
  typename JetCollection::const_iterator i_jet,i_matched;
  GenJetCollection::const_iterator i_genjet;
  event.getByLabel (genjets_,genjets);
  event.getByLabel (jets_,jets);
  event.getByLabel("genEventScale",genEventScale);
  float rr;  
  int njet(0);
  ptHat_ = *genEventScale;
  if (jets->size()>0 && genjets->size()>0)
    {
      for (i_genjet = genjets->begin(); i_genjet != genjets->end(); i_genjet++)
       {    
         float rmin(99);
         for(i_jet = jets->begin();i_jet != jets->end(); i_jet++)
           {
	     rr=radius(i_genjet,i_jet);
	     if (rr<rmin)
               {
                 rmin = rr;
                 i_matched = i_jet;
               }
	   }
         ptGen_ = i_genjet->pt();
         etaGen_ = i_genjet->eta();
         phiGen_ = i_genjet->phi();
         ptCalo_ = i_matched->pt();
         etaCalo_ = i_matched->eta();
         phiCalo_ = i_matched->phi();
         dR_ = rmin;
         rank_ = njet; 	
         mcTruthTree_->Fill();
         njet++;
       }  
    }      
}
//////////////////////////////////////////////////////////////////////////////////////////
template<class Jet>
MCTruthTreeProducer<Jet>::MCTruthTreeProducer() 
{
  m_file_=0;
}
}
